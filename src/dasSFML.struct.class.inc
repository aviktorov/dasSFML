// this file is generated via daScript automatic C++ binder
// all user modifications will be lost after this file is re-generated

struct sf_Time_GeneratedAnnotation : ManagedStructureAnnotation<sf::Time> {
	sf_Time_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Time", ml, "sf::Time") {
	}
	void init () {
	}
};

struct sf_Clock_GeneratedAnnotation : ManagedStructureAnnotation<sf::Clock> {
	sf_Clock_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Clock", ml, "sf::Clock") {
	}
	void init () {
	}
};

struct sf_InputStream_GeneratedAnnotation : ManagedStructureAnnotation<sf::InputStream> {
	sf_InputStream_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("InputStream", ml, "sf::InputStream") {
	}
	void init () {
	}
};

struct sf_NonCopyable_GeneratedAnnotation : ManagedStructureAnnotation<sf::NonCopyable> {
	sf_NonCopyable_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("NonCopyable", ml, "sf::NonCopyable") {
	}
	void init () {
	}
};

struct sf_FileInputStream_GeneratedAnnotation : ManagedStructureAnnotation<sf::FileInputStream> {
	sf_FileInputStream_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("FileInputStream", ml, "sf::FileInputStream") {
	}
	void init () {
	}
};

struct sf_Lock_GeneratedAnnotation : ManagedStructureAnnotation<sf::Lock> {
	sf_Lock_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Lock", ml, "sf::Lock") {
	}
	void init () {
	}
};

struct sf_MemoryInputStream_GeneratedAnnotation : ManagedStructureAnnotation<sf::MemoryInputStream> {
	sf_MemoryInputStream_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("MemoryInputStream", ml, "sf::MemoryInputStream") {
	}
	void init () {
	}
};

struct sf_Mutex_GeneratedAnnotation : ManagedStructureAnnotation<sf::Mutex> {
	sf_Mutex_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Mutex", ml, "sf::Mutex") {
	}
	void init () {
	}
};

struct sf_Thread_GeneratedAnnotation : ManagedStructureAnnotation<sf::Thread> {
	sf_Thread_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Thread", ml, "sf::Thread") {
	}
	void init () {
	}
};

struct sf_priv_ThreadFunc_GeneratedAnnotation : ManagedStructureAnnotation<sf::priv::ThreadFunc> {
	sf_priv_ThreadFunc_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("ThreadFunc", ml, "sf::priv::ThreadFunc") {
	}
	void init () {
	}
};

struct sf_ThreadLocal_GeneratedAnnotation : ManagedStructureAnnotation<sf::ThreadLocal> {
	sf_ThreadLocal_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("ThreadLocal", ml, "sf::ThreadLocal") {
	}
	void init () {
	}
};

struct sf_Clipboard_GeneratedAnnotation : ManagedStructureAnnotation<sf::Clipboard> {
	sf_Clipboard_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Clipboard", ml, "sf::Clipboard") {
	}
	void init () {
	}
};

struct sf_GlResource_GeneratedAnnotation : ManagedStructureAnnotation<sf::GlResource> {
	sf_GlResource_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("GlResource", ml, "sf::GlResource") {
	}
	void init () {
	}
};

struct sf_ContextSettings_GeneratedAnnotation : ManagedStructureAnnotation<sf::ContextSettings> {
	sf_ContextSettings_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("ContextSettings", ml, "sf::ContextSettings") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(depthBits)>("depthBits","depthBits");
		addField<DAS_BIND_MANAGED_FIELD(stencilBits)>("stencilBits","stencilBits");
		addField<DAS_BIND_MANAGED_FIELD(antialiasingLevel)>("antialiasingLevel","antialiasingLevel");
		addField<DAS_BIND_MANAGED_FIELD(majorVersion)>("majorVersion","majorVersion");
		addField<DAS_BIND_MANAGED_FIELD(minorVersion)>("minorVersion","minorVersion");
		addField<DAS_BIND_MANAGED_FIELD(attributeFlags)>("attributeFlags","attributeFlags");
		addField<DAS_BIND_MANAGED_FIELD(sRgbCapable)>("sRgbCapable","sRgbCapable");
	}
};

struct sf_Context_GeneratedAnnotation : ManagedStructureAnnotation<sf::Context> {
	sf_Context_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Context", ml, "sf::Context") {
	}
	void init () {
	}
};

struct sf_Cursor_GeneratedAnnotation : ManagedStructureAnnotation<sf::Cursor> {
	sf_Cursor_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Cursor", ml, "sf::Cursor") {
	}
	void init () {
	}
};

struct sf_Joystick_Identification_GeneratedAnnotation : ManagedStructureAnnotation<sf::Joystick::Identification> {
	sf_Joystick_Identification_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Identification", ml, "sf::Joystick::Identification") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(name)>("name","name");
		addField<DAS_BIND_MANAGED_FIELD(vendorId)>("vendorId","vendorId");
		addField<DAS_BIND_MANAGED_FIELD(productId)>("productId","productId");
	}
};

struct sf_Joystick_GeneratedAnnotation : ManagedStructureAnnotation<sf::Joystick> {
	sf_Joystick_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Joystick", ml, "sf::Joystick") {
	}
	void init () {
	}
};

struct sf_Keyboard_GeneratedAnnotation : ManagedStructureAnnotation<sf::Keyboard> {
	sf_Keyboard_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Keyboard", ml, "sf::Keyboard") {
	}
	void init () {
	}
};

struct sf_Mouse_GeneratedAnnotation : ManagedStructureAnnotation<sf::Mouse> {
	sf_Mouse_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Mouse", ml, "sf::Mouse") {
	}
	void init () {
	}
};

struct sf_Sensor_GeneratedAnnotation : ManagedStructureAnnotation<sf::Sensor> {
	sf_Sensor_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Sensor", ml, "sf::Sensor") {
	}
	void init () {
	}
};

struct sf_Event_SizeEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::SizeEvent> {
	sf_Event_SizeEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("SizeEvent", ml, "sf::Event::SizeEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(width)>("width","width");
		addField<DAS_BIND_MANAGED_FIELD(height)>("height","height");
	}
};

struct sf_Event_KeyEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::KeyEvent> {
	sf_Event_KeyEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("KeyEvent", ml, "sf::Event::KeyEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(code)>("code","code");
		addField<DAS_BIND_MANAGED_FIELD(alt)>("alt","alt");
		addField<DAS_BIND_MANAGED_FIELD(control)>("control","control");
		addField<DAS_BIND_MANAGED_FIELD(shift)>("shift","shift");
		addField<DAS_BIND_MANAGED_FIELD(system)>("system","system");
	}
};

struct sf_Event_TextEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::TextEvent> {
	sf_Event_TextEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("TextEvent", ml, "sf::Event::TextEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(unicode)>("unicode","unicode");
	}
};

struct sf_Event_MouseMoveEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::MouseMoveEvent> {
	sf_Event_MouseMoveEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("MouseMoveEvent", ml, "sf::Event::MouseMoveEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(x)>("x","x");
		addField<DAS_BIND_MANAGED_FIELD(y)>("y","y");
	}
};

struct sf_Event_MouseButtonEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::MouseButtonEvent> {
	sf_Event_MouseButtonEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("MouseButtonEvent", ml, "sf::Event::MouseButtonEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(button)>("button","button");
		addField<DAS_BIND_MANAGED_FIELD(x)>("x","x");
		addField<DAS_BIND_MANAGED_FIELD(y)>("y","y");
	}
};

struct sf_Event_MouseWheelEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::MouseWheelEvent> {
	sf_Event_MouseWheelEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("MouseWheelEvent", ml, "sf::Event::MouseWheelEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(delta)>("delta","delta");
		addField<DAS_BIND_MANAGED_FIELD(x)>("x","x");
		addField<DAS_BIND_MANAGED_FIELD(y)>("y","y");
	}
};

struct sf_Event_MouseWheelScrollEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::MouseWheelScrollEvent> {
	sf_Event_MouseWheelScrollEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("MouseWheelScrollEvent", ml, "sf::Event::MouseWheelScrollEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(wheel)>("wheel","wheel");
		addField<DAS_BIND_MANAGED_FIELD(delta)>("delta","delta");
		addField<DAS_BIND_MANAGED_FIELD(x)>("x","x");
		addField<DAS_BIND_MANAGED_FIELD(y)>("y","y");
	}
};

struct sf_Event_JoystickConnectEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::JoystickConnectEvent> {
	sf_Event_JoystickConnectEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("JoystickConnectEvent", ml, "sf::Event::JoystickConnectEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(joystickId)>("joystickId","joystickId");
	}
};

struct sf_Event_JoystickMoveEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::JoystickMoveEvent> {
	sf_Event_JoystickMoveEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("JoystickMoveEvent", ml, "sf::Event::JoystickMoveEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(joystickId)>("joystickId","joystickId");
		addField<DAS_BIND_MANAGED_FIELD(axis)>("axis","axis");
		addField<DAS_BIND_MANAGED_FIELD(position)>("position","position");
	}
};

struct sf_Event_JoystickButtonEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::JoystickButtonEvent> {
	sf_Event_JoystickButtonEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("JoystickButtonEvent", ml, "sf::Event::JoystickButtonEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(joystickId)>("joystickId","joystickId");
		addField<DAS_BIND_MANAGED_FIELD(button)>("button","button");
	}
};

struct sf_Event_TouchEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::TouchEvent> {
	sf_Event_TouchEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("TouchEvent", ml, "sf::Event::TouchEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(finger)>("finger","finger");
		addField<DAS_BIND_MANAGED_FIELD(x)>("x","x");
		addField<DAS_BIND_MANAGED_FIELD(y)>("y","y");
	}
};

struct sf_Event_SensorEvent_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event::SensorEvent> {
	sf_Event_SensorEvent_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("SensorEvent", ml, "sf::Event::SensorEvent") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(type)>("_type","type");
		addField<DAS_BIND_MANAGED_FIELD(x)>("x","x");
		addField<DAS_BIND_MANAGED_FIELD(y)>("y","y");
		addField<DAS_BIND_MANAGED_FIELD(z)>("z","z");
	}
};

struct sf_Event_GeneratedAnnotation : ManagedStructureAnnotation<sf::Event> {
	sf_Event_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Event", ml, "sf::Event") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(type)>("_type","type");
	}
};

struct sf_Touch_GeneratedAnnotation : ManagedStructureAnnotation<sf::Touch> {
	sf_Touch_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Touch", ml, "sf::Touch") {
	}
	void init () {
	}
};

struct sf_VideoMode_GeneratedAnnotation : ManagedStructureAnnotation<sf::VideoMode> {
	sf_VideoMode_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("VideoMode", ml, "sf::VideoMode") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(width)>("width","width");
		addField<DAS_BIND_MANAGED_FIELD(height)>("height","height");
		addField<DAS_BIND_MANAGED_FIELD(bitsPerPixel)>("bitsPerPixel","bitsPerPixel");
	}
};

struct sf_Vulkan_GeneratedAnnotation : ManagedStructureAnnotation<sf::Vulkan> {
	sf_Vulkan_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Vulkan", ml, "sf::Vulkan") {
	}
	void init () {
	}
};

struct sf_WindowBase_GeneratedAnnotation : ManagedStructureAnnotation<sf::WindowBase> {
	sf_WindowBase_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("WindowBase", ml, "sf::WindowBase") {
	}
	void init () {
	}
};

struct sf_Window_GeneratedAnnotation : ManagedStructureAnnotation<sf::Window> {
	sf_Window_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Window", ml, "sf::Window") {
	}
	void init () {
	}
};

struct sf_BlendMode_GeneratedAnnotation : ManagedStructureAnnotation<sf::BlendMode> {
	sf_BlendMode_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("BlendMode", ml, "sf::BlendMode") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(colorSrcFactor)>("colorSrcFactor","colorSrcFactor");
		addField<DAS_BIND_MANAGED_FIELD(colorDstFactor)>("colorDstFactor","colorDstFactor");
		addField<DAS_BIND_MANAGED_FIELD(colorEquation)>("colorEquation","colorEquation");
		addField<DAS_BIND_MANAGED_FIELD(alphaSrcFactor)>("alphaSrcFactor","alphaSrcFactor");
		addField<DAS_BIND_MANAGED_FIELD(alphaDstFactor)>("alphaDstFactor","alphaDstFactor");
		addField<DAS_BIND_MANAGED_FIELD(alphaEquation)>("alphaEquation","alphaEquation");
	}
};

struct sf_Transform_GeneratedAnnotation : ManagedStructureAnnotation<sf::Transform> {
	sf_Transform_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Transform", ml, "sf::Transform") {
	}
	void init () {
	}
};

struct sf_RenderStates_GeneratedAnnotation : ManagedStructureAnnotation<sf::RenderStates> {
	sf_RenderStates_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("RenderStates", ml, "sf::RenderStates") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(blendMode)>("blendMode","blendMode");
		addField<DAS_BIND_MANAGED_FIELD(transform)>("transform","transform");
		addField<DAS_BIND_MANAGED_FIELD(texture)>("texture","texture");
		addField<DAS_BIND_MANAGED_FIELD(shader)>("shader","shader");
	}
};

struct sf_Drawable_GeneratedAnnotation : ManagedStructureAnnotation<sf::Drawable> {
	sf_Drawable_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Drawable", ml, "sf::Drawable") {
	}
	void init () {
	}
};

struct sf_Transformable_GeneratedAnnotation : ManagedStructureAnnotation<sf::Transformable> {
	sf_Transformable_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Transformable", ml, "sf::Transformable") {
	}
	void init () {
	}
};

struct sf_Color_GeneratedAnnotation : ManagedStructureAnnotation<sf::Color> {
	sf_Color_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Color", ml, "sf::Color") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(r)>("r","r");
		addField<DAS_BIND_MANAGED_FIELD(g)>("g","g");
		addField<DAS_BIND_MANAGED_FIELD(b)>("b","b");
		addField<DAS_BIND_MANAGED_FIELD(a)>("a","a");
	}
};

struct sf_Vertex_GeneratedAnnotation : ManagedStructureAnnotation<sf::Vertex> {
	sf_Vertex_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Vertex", ml, "sf::Vertex") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(position)>("position","position");
		addField<DAS_BIND_MANAGED_FIELD(color)>("color","color");
		addField<DAS_BIND_MANAGED_FIELD(texCoords)>("texCoords","texCoords");
	}
};

struct sf_VertexArray_GeneratedAnnotation : ManagedStructureAnnotation<sf::VertexArray> {
	sf_VertexArray_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("VertexArray", ml, "sf::VertexArray") {
	}
	void init () {
	}
};

struct sf_Shape_GeneratedAnnotation : ManagedStructureAnnotation<sf::Shape> {
	sf_Shape_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Shape", ml, "sf::Shape") {
	}
	void init () {
	}
};

struct sf_CircleShape_GeneratedAnnotation : ManagedStructureAnnotation<sf::CircleShape> {
	sf_CircleShape_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("CircleShape", ml, "sf::CircleShape") {
	}
	void init () {
	}
};

struct sf_ConvexShape_GeneratedAnnotation : ManagedStructureAnnotation<sf::ConvexShape> {
	sf_ConvexShape_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("ConvexShape", ml, "sf::ConvexShape") {
	}
	void init () {
	}
};

struct sf_Glyph_GeneratedAnnotation : ManagedStructureAnnotation<sf::Glyph> {
	sf_Glyph_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Glyph", ml, "sf::Glyph") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(advance)>("advance","advance");
		addField<DAS_BIND_MANAGED_FIELD(lsbDelta)>("lsbDelta","lsbDelta");
		addField<DAS_BIND_MANAGED_FIELD(rsbDelta)>("rsbDelta","rsbDelta");
		addField<DAS_BIND_MANAGED_FIELD(bounds)>("bounds","bounds");
		addField<DAS_BIND_MANAGED_FIELD(textureRect)>("textureRect","textureRect");
	}
};

struct sf_Image_GeneratedAnnotation : ManagedStructureAnnotation<sf::Image> {
	sf_Image_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Image", ml, "sf::Image") {
	}
	void init () {
	}
};

struct sf_Texture_GeneratedAnnotation : ManagedStructureAnnotation<sf::Texture> {
	sf_Texture_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Texture", ml, "sf::Texture") {
	}
	void init () {
	}
};

struct sf_Font_Info_GeneratedAnnotation : ManagedStructureAnnotation<sf::Font::Info> {
	sf_Font_Info_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Info", ml, "sf::Font::Info") {
	}
	void init () {
		addField<DAS_BIND_MANAGED_FIELD(family)>("family","family");
	}
};

struct sf_Font_GeneratedAnnotation : ManagedStructureAnnotation<sf::Font> {
	sf_Font_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Font", ml, "sf::Font") {
	}
	void init () {
	}
};

struct sf_RectangleShape_GeneratedAnnotation : ManagedStructureAnnotation<sf::RectangleShape> {
	sf_RectangleShape_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("RectangleShape", ml, "sf::RectangleShape") {
	}
	void init () {
	}
};

struct sf_View_GeneratedAnnotation : ManagedStructureAnnotation<sf::View> {
	sf_View_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("View", ml, "sf::View") {
	}
	void init () {
	}
};

struct sf_RenderTarget_GeneratedAnnotation : ManagedStructureAnnotation<sf::RenderTarget> {
	sf_RenderTarget_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("RenderTarget", ml, "sf::RenderTarget") {
	}
	void init () {
	}
};

struct sf_RenderTexture_GeneratedAnnotation : ManagedStructureAnnotation<sf::RenderTexture> {
	sf_RenderTexture_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("RenderTexture", ml, "sf::RenderTexture") {
	}
	void init () {
	}
};

struct sf_RenderWindow_GeneratedAnnotation : ManagedStructureAnnotation<sf::RenderWindow> {
	sf_RenderWindow_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("RenderWindow", ml, "sf::RenderWindow") {
	}
	void init () {
	}
};

struct sf_Shader_CurrentTextureType_GeneratedAnnotation : ManagedStructureAnnotation<sf::Shader::CurrentTextureType> {
	sf_Shader_CurrentTextureType_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("CurrentTextureType", ml, "sf::Shader::CurrentTextureType") {
	}
	void init () {
	}
};

struct sf_Shader_GeneratedAnnotation : ManagedStructureAnnotation<sf::Shader> {
	sf_Shader_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Shader", ml, "sf::Shader") {
	}
	void init () {
	}
};

struct sf_Sprite_GeneratedAnnotation : ManagedStructureAnnotation<sf::Sprite> {
	sf_Sprite_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Sprite", ml, "sf::Sprite") {
	}
	void init () {
	}
};

struct sf_Text_GeneratedAnnotation : ManagedStructureAnnotation<sf::Text> {
	sf_Text_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("Text", ml, "sf::Text") {
	}
	void init () {
	}
};

struct sf_VertexBuffer_GeneratedAnnotation : ManagedStructureAnnotation<sf::VertexBuffer> {
	sf_VertexBuffer_GeneratedAnnotation(ModuleLibrary & ml) : ManagedStructureAnnotation ("VertexBuffer", ml, "sf::VertexBuffer") {
	}
	void init () {
	}
};

