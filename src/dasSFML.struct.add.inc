// this file is generated via daScript automatic C++ binder
// all user modifications will be lost after this file is re-generated

auto ann_Time = make_smart<sf_Time_GeneratedAnnotation>(lib);
addAnnotation(ann_Time);
auto ann_Clock = make_smart<sf_Clock_GeneratedAnnotation>(lib);
addAnnotation(ann_Clock);
auto ann_InputStream = make_smart<sf_InputStream_GeneratedAnnotation>(lib);
addAnnotation(ann_InputStream);
auto ann_NonCopyable = make_smart<sf_NonCopyable_GeneratedAnnotation>(lib);
addAnnotation(ann_NonCopyable);
auto ann_FileInputStream = make_smart<sf_FileInputStream_GeneratedAnnotation>(lib);
addAnnotation(ann_FileInputStream);
auto ann_Lock = make_smart<sf_Lock_GeneratedAnnotation>(lib);
addAnnotation(ann_Lock);
auto ann_MemoryInputStream = make_smart<sf_MemoryInputStream_GeneratedAnnotation>(lib);
addAnnotation(ann_MemoryInputStream);
auto ann_Mutex = make_smart<sf_Mutex_GeneratedAnnotation>(lib);
addAnnotation(ann_Mutex);
auto ann_Thread = make_smart<sf_Thread_GeneratedAnnotation>(lib);
addAnnotation(ann_Thread);
auto ann_ThreadFunc = make_smart<sf_priv_ThreadFunc_GeneratedAnnotation>(lib);
addAnnotation(ann_ThreadFunc);
auto ann_ThreadLocal = make_smart<sf_ThreadLocal_GeneratedAnnotation>(lib);
addAnnotation(ann_ThreadLocal);
auto ann_Clipboard = make_smart<sf_Clipboard_GeneratedAnnotation>(lib);
addAnnotation(ann_Clipboard);
auto ann_GlResource = make_smart<sf_GlResource_GeneratedAnnotation>(lib);
addAnnotation(ann_GlResource);
auto ann_ContextSettings = make_smart<sf_ContextSettings_GeneratedAnnotation>(lib);
addAnnotation(ann_ContextSettings);
auto ann_Context = make_smart<sf_Context_GeneratedAnnotation>(lib);
addAnnotation(ann_Context);
auto ann_Cursor = make_smart<sf_Cursor_GeneratedAnnotation>(lib);
addAnnotation(ann_Cursor);
auto ann_Identification = make_smart<sf_Joystick_Identification_GeneratedAnnotation>(lib);
addAnnotation(ann_Identification);
auto ann_Joystick = make_smart<sf_Joystick_GeneratedAnnotation>(lib);
addAnnotation(ann_Joystick);
auto ann_Keyboard = make_smart<sf_Keyboard_GeneratedAnnotation>(lib);
addAnnotation(ann_Keyboard);
auto ann_Mouse = make_smart<sf_Mouse_GeneratedAnnotation>(lib);
addAnnotation(ann_Mouse);
auto ann_Sensor = make_smart<sf_Sensor_GeneratedAnnotation>(lib);
addAnnotation(ann_Sensor);
auto ann_SizeEvent = make_smart<sf_Event_SizeEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_SizeEvent);
auto ann_KeyEvent = make_smart<sf_Event_KeyEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_KeyEvent);
auto ann_TextEvent = make_smart<sf_Event_TextEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_TextEvent);
auto ann_MouseMoveEvent = make_smart<sf_Event_MouseMoveEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_MouseMoveEvent);
auto ann_MouseButtonEvent = make_smart<sf_Event_MouseButtonEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_MouseButtonEvent);
auto ann_MouseWheelEvent = make_smart<sf_Event_MouseWheelEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_MouseWheelEvent);
auto ann_MouseWheelScrollEvent = make_smart<sf_Event_MouseWheelScrollEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_MouseWheelScrollEvent);
auto ann_JoystickConnectEvent = make_smart<sf_Event_JoystickConnectEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_JoystickConnectEvent);
auto ann_JoystickMoveEvent = make_smart<sf_Event_JoystickMoveEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_JoystickMoveEvent);
auto ann_JoystickButtonEvent = make_smart<sf_Event_JoystickButtonEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_JoystickButtonEvent);
auto ann_TouchEvent = make_smart<sf_Event_TouchEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_TouchEvent);
auto ann_SensorEvent = make_smart<sf_Event_SensorEvent_GeneratedAnnotation>(lib);
addAnnotation(ann_SensorEvent);
auto ann_Event = make_smart<sf_Event_GeneratedAnnotation>(lib);
addAnnotation(ann_Event);
auto ann_Touch = make_smart<sf_Touch_GeneratedAnnotation>(lib);
addAnnotation(ann_Touch);
auto ann_VideoMode = make_smart<sf_VideoMode_GeneratedAnnotation>(lib);
addAnnotation(ann_VideoMode);
auto ann_Vulkan = make_smart<sf_Vulkan_GeneratedAnnotation>(lib);
addAnnotation(ann_Vulkan);
auto ann_WindowBase = make_smart<sf_WindowBase_GeneratedAnnotation>(lib);
addAnnotation(ann_WindowBase);
auto ann_Window = make_smart<sf_Window_GeneratedAnnotation>(lib);
addAnnotation(ann_Window);
auto ann_BlendMode = make_smart<sf_BlendMode_GeneratedAnnotation>(lib);
addAnnotation(ann_BlendMode);
auto ann_Transform = make_smart<sf_Transform_GeneratedAnnotation>(lib);
addAnnotation(ann_Transform);
auto ann_RenderStates = make_smart<sf_RenderStates_GeneratedAnnotation>(lib);
addAnnotation(ann_RenderStates);
auto ann_Drawable = make_smart<sf_Drawable_GeneratedAnnotation>(lib);
addAnnotation(ann_Drawable);
auto ann_Transformable = make_smart<sf_Transformable_GeneratedAnnotation>(lib);
addAnnotation(ann_Transformable);
auto ann_Color = make_smart<sf_Color_GeneratedAnnotation>(lib);
addAnnotation(ann_Color);
auto ann_Vertex = make_smart<sf_Vertex_GeneratedAnnotation>(lib);
addAnnotation(ann_Vertex);
auto ann_VertexArray = make_smart<sf_VertexArray_GeneratedAnnotation>(lib);
addAnnotation(ann_VertexArray);
auto ann_Shape = make_smart<sf_Shape_GeneratedAnnotation>(lib);
addAnnotation(ann_Shape);
auto ann_CircleShape = make_smart<sf_CircleShape_GeneratedAnnotation>(lib);
addAnnotation(ann_CircleShape);
auto ann_ConvexShape = make_smart<sf_ConvexShape_GeneratedAnnotation>(lib);
addAnnotation(ann_ConvexShape);
auto ann_Glyph = make_smart<sf_Glyph_GeneratedAnnotation>(lib);
addAnnotation(ann_Glyph);
auto ann_Image = make_smart<sf_Image_GeneratedAnnotation>(lib);
addAnnotation(ann_Image);
auto ann_Texture = make_smart<sf_Texture_GeneratedAnnotation>(lib);
addAnnotation(ann_Texture);
auto ann_Info = make_smart<sf_Font_Info_GeneratedAnnotation>(lib);
addAnnotation(ann_Info);
auto ann_Font = make_smart<sf_Font_GeneratedAnnotation>(lib);
addAnnotation(ann_Font);
auto ann_RectangleShape = make_smart<sf_RectangleShape_GeneratedAnnotation>(lib);
addAnnotation(ann_RectangleShape);
auto ann_View = make_smart<sf_View_GeneratedAnnotation>(lib);
addAnnotation(ann_View);
auto ann_RenderTarget = make_smart<sf_RenderTarget_GeneratedAnnotation>(lib);
addAnnotation(ann_RenderTarget);
auto ann_RenderTexture = make_smart<sf_RenderTexture_GeneratedAnnotation>(lib);
addAnnotation(ann_RenderTexture);
auto ann_RenderWindow = make_smart<sf_RenderWindow_GeneratedAnnotation>(lib);
addAnnotation(ann_RenderWindow);
auto ann_CurrentTextureType = make_smart<sf_Shader_CurrentTextureType_GeneratedAnnotation>(lib);
addAnnotation(ann_CurrentTextureType);
auto ann_Shader = make_smart<sf_Shader_GeneratedAnnotation>(lib);
addAnnotation(ann_Shader);
auto ann_Sprite = make_smart<sf_Sprite_GeneratedAnnotation>(lib);
addAnnotation(ann_Sprite);
auto ann_Text = make_smart<sf_Text_GeneratedAnnotation>(lib);
addAnnotation(ann_Text);
auto ann_VertexBuffer = make_smart<sf_VertexBuffer_GeneratedAnnotation>(lib);
addAnnotation(ann_VertexBuffer);
setParents(this,"FileInputStream",  {"InputStream"});
setParents(this,"RenderTarget",  {"NonCopyable"});
setParents(this,"WindowBase",  {"NonCopyable"});
setParents(this,"Texture",  {"GlResource"});
setParents(this,"Shape",  {"Drawable"});
setParents(this,"Shader",  {"GlResource"});
setParents(this,"Cursor",  {"NonCopyable"});
setParents(this,"Text",  {"Drawable"});
setParents(this,"Lock",  {"NonCopyable"});
setParents(this,"RectangleShape",  {"Shape","Drawable"});
setParents(this,"Window",  {"WindowBase","NonCopyable"});
setParents(this,"Context",  {"GlResource"});
setParents(this,"VertexArray",  {"Drawable"});
setParents(this,"CircleShape",  {"Shape","Drawable"});
setParents(this,"ConvexShape",  {"Shape","Drawable"});
setParents(this,"RenderTexture",  {"RenderTarget","NonCopyable"});
setParents(this,"VertexBuffer",  {"Drawable"});
setParents(this,"MemoryInputStream",  {"InputStream"});
setParents(this,"Mutex",  {"NonCopyable"});
setParents(this,"Thread",  {"NonCopyable"});
setParents(this,"ThreadLocal",  {"NonCopyable"});
setParents(this,"RenderWindow",  {"Window","WindowBase","NonCopyable"});
setParents(this,"Sprite",  {"Drawable"});
